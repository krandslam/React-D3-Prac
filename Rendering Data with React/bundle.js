(function (React, ReactDOM, d3) {
  'use strict';

  var React__default = 'default' in React ? React['default'] : React;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  const csvUrl =
    'https://gist.githubusercontent.com/curran/b236990081a24761f7000567094914e0/raw/cssNamedColors.csv';

  const width = 960;
  const height = 500;
  const centerX = width / 2;
  const centerY = height / 2;

  const pieArc = d3.arc()
    .innerRadius(0)
    .outerRadius(width);

  const App = () => {
    // keep updating
    const [data, setData] = React.useState(null);

    React.useEffect(() => {
      d3.csv(csvUrl).then(setData);
    }, []);

    if (!data) {
      return React__default.createElement( 'pre', null, "Loading..." );
    }
  	
    const colorPie = d3.pie().value(1);
    return (
      React__default.createElement( 'svg', { width: width, height: height },
        React__default.createElement( 'g', {
          transform: `translate(${centerX},${centerY})` },
          colorPie(data)
              .map((d) => (
                React__default.createElement( 'path', {
                  fill: d.data['RGB hex value'], d: pieArc(d) })
              ))
        )
      )
    );
  };

  const rootElement = document.getElementById(
    'root'
  );
  ReactDOM.render(React__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwge1xuICB1c2VTdGF0ZSxcbiAgdXNlQ2FsbGJhY2ssXG4gIHVzZUVmZmVjdCxcbn0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBjc3YsIGFyYywgcGllIH0gZnJvbSAnZDMnO1xuXG5jb25zdCBjc3ZVcmwgPVxuICAnaHR0cHM6Ly9naXN0LmdpdGh1YnVzZXJjb250ZW50LmNvbS9jdXJyYW4vYjIzNjk5MDA4MWEyNDc2MWY3MDAwNTY3MDk0OTE0ZTAvcmF3L2Nzc05hbWVkQ29sb3JzLmNzdic7XG5cbmNvbnN0IHdpZHRoID0gOTYwO1xuY29uc3QgaGVpZ2h0ID0gNTAwO1xuY29uc3QgY2VudGVyWCA9IHdpZHRoIC8gMjtcbmNvbnN0IGNlbnRlclkgPSBoZWlnaHQgLyAyO1xuXG5jb25zdCBwaWVBcmMgPSBhcmMoKVxuICAuaW5uZXJSYWRpdXMoMClcbiAgLm91dGVyUmFkaXVzKHdpZHRoKTtcblxuY29uc3QgQXBwID0gKCkgPT4ge1xuICAvLyBrZWVwIHVwZGF0aW5nXG4gIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlKG51bGwpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY3N2KGNzdlVybCkudGhlbihzZXREYXRhKTtcbiAgfSwgW10pO1xuXG4gIGlmICghZGF0YSkge1xuICAgIHJldHVybiA8cHJlPkxvYWRpbmcuLi48L3ByZT47XG4gIH1cblx0XG4gIGNvbnN0IGNvbG9yUGllID0gcGllKCkudmFsdWUoMSk7XG4gIHJldHVybiAoXG4gICAgPHN2ZyB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fT5cbiAgICAgIDxnXG4gICAgICAgIHRyYW5zZm9ybT17YHRyYW5zbGF0ZSgke2NlbnRlclh9LCR7Y2VudGVyWX0pYH1cbiAgICAgID5cbiAgICAgICAge1xuICAgICAgICAgIGNvbG9yUGllKGRhdGEpXG4gICAgICAgICAgICAubWFwKChkKSA9PiAoXG4gICAgICAgICAgICAgIDxwYXRoXG4gICAgICAgICAgICAgICAgZmlsbD17ZC5kYXRhWydSR0IgaGV4IHZhbHVlJ119XG4gICAgICAgICAgICAgICAgZD17cGllQXJjKGQpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKSlcbiAgICAgICAgICAvLyAgIGRhdGEubWFwKChkLCBpKSA9PiAoXG4gICAgICAgICAgLy8gICA8cGF0aFxuICAgICAgICAgIC8vICAgICBmaWxsPXtkWydSR0IgaGV4IHZhbHVlJ119XG4gICAgICAgICAgLy8gICAgIGQ9e3BpZUFyYyh7XG4gICAgICAgICAgLy8gICAgICAgc3RhcnRBbmdsZTpcbiAgICAgICAgICAvLyAgICAgICAgIChpIC8gZGF0YS5sZW5ndGgpICogMiAqIE1hdGguUEksXG4gICAgICAgICAgLy8gICAgICAgZW5kQW5nbGU6XG4gICAgICAgICAgLy8gICAgICAgICAoKGkgKyAxKSAvIGRhdGEubGVuZ3RoKSAqXG4gICAgICAgICAgLy8gICAgICAgICAyICpcbiAgICAgICAgICAvLyAgICAgICAgIE1hdGguUElcbiAgICAgICAgICAvLyAgICAgfSl9XG4gICAgICAgICAgLy8gICAvPlxuICAgICAgICAgIC8vICkpXG4gICAgICAgIH1cbiAgICAgIDwvZz5cbiAgICA8L3N2Zz5cbiAgKTtcbn07XG5cbmNvbnN0IHJvb3RFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICdyb290J1xuKTtcblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCByb290RWxlbWVudCk7XG4iXSwibmFtZXMiOlsiYXJjIiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJjc3YiLCJSZWFjdCIsInBpZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0VBUUEsTUFBTSxNQUFNO0VBQ1osRUFBRSxtR0FBbUcsQ0FBQztBQUN0RztFQUNBLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQztFQUNsQixNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUM7RUFDbkIsTUFBTSxPQUFPLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztFQUMxQixNQUFNLE9BQU8sR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQzNCO0VBQ0EsTUFBTSxNQUFNLEdBQUdBLE1BQUcsRUFBRTtFQUNwQixHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7RUFDakIsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDdEI7RUFDQSxNQUFNLEdBQUcsR0FBRyxNQUFNO0VBQ2xCO0VBQ0EsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxHQUFHQyxjQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDekM7RUFDQSxFQUFFQyxlQUFTLENBQUMsTUFBTTtFQUNsQixJQUFJQyxNQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0VBQzlCLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNUO0VBQ0EsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFO0VBQ2IsSUFBSSxPQUFPQywyQ0FBSyxZQUFVLEVBQU0sQ0FBQztFQUNqQyxHQUFHO0VBQ0g7RUFDQSxFQUFFLE1BQU0sUUFBUSxHQUFHQyxNQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDbEMsRUFBRTtFQUNGLElBQUlELHVDQUFLLE9BQU8sS0FBTSxFQUFDLFFBQVE7RUFDL0IsTUFBTUE7RUFDTixRQUFRLFdBQVcsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztFQUVwRCxRQUNVLFFBQVEsQ0FBQyxJQUFJLENBQUM7RUFDeEIsYUFBYSxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQ25CLGNBQWNBO0VBQ2QsZ0JBQWdCLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUUsRUFDOUIsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFFLENBQ2I7RUFDaEIsYUFBYSxDQWNKO0VBQ1QsT0FBVTtFQUNWLEtBQVU7RUFDVixJQUFJO0VBQ0osQ0FBQyxDQUFDO0FBQ0Y7RUFDQSxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsY0FBYztFQUMzQyxFQUFFLE1BQU07RUFDUixDQUFDLENBQUM7RUFDRixRQUFRLENBQUMsTUFBTSxDQUFDQSw4QkFBQyxTQUFHLEVBQUcsRUFBRSxXQUFXLENBQUM7Ozs7In0=